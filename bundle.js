!function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var e={};return n.m=t,n.c=e,n.p="/",n(0)}([function(t,n,e){"use strict";function r(){var t=Number(document.getElementById("iterations").value);"running"===h&&g<t&&(y=s(y,g,d,v),g+=1);var n=Number(document.getElementById("fps").value)||15;setTimeout(r,1e3/n)}function o(){y=[0,0],g=0}function i(){window.requestAnimationFrame(i),p.clearRect(0,0,d,v),c(p,d,v,y);var t=Number(document.getElementById("iterations").value);a(p,d,v,g,t)}e(67);var u=e(31),c=u.renderPath,a=u.renderProgress,f=e(30),s=f.displaceMidpoints,l=document.getElementById("canvas"),p=l.getContext("2d"),d=l.width,v=l.height,h="running",y=[0,0],g=0;r(),i(),document.getElementById("play").addEventListener("click",function(){h="running"===h?"paused":"running"}),document.getElementById("reset").addEventListener("click",o),document.getElementById("iterations").addEventListener("input",function(t){document.getElementById("iterations-value").value=t.target.value,o()}),document.getElementById("fps").addEventListener("input",function(t){document.getElementById("fps-value").value=t.target.value})},function(t,n,e){var r=e(24)("wks"),o=e(27),i=e(2).Symbol,u="function"==typeof i,c=t.exports=function(t){return r[t]||(r[t]=u&&i[t]||(u?i:o)("Symbol."+t))};c.store=r},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(11);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n,e){var r=e(9),o=e(12);t.exports=e(7)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n){t.exports={}},function(t,n){var e=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=e)},function(t,n,e){t.exports=!e(21)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(3),o=e(43),i=e(59),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,e){var r=e(24)("keys"),o=e(27);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(44),o=e(10);t.exports=function(t){return r(o(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){var r=e(37);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n,e){var r=e(11),o=e(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2),o=e(6),i=e(17),u=e(4),c="prototype",a=function(t,n,e){var f,s,l,p=t&a.F,d=t&a.G,v=t&a.S,h=t&a.P,y=t&a.B,g=t&a.W,m=d?o:o[n]||(o[n]={}),x=m[c],b=d?r:v?r[n]:(r[n]||{})[c];d&&(e=n);for(f in e)s=!p&&b&&void 0!==b[f],s&&f in m||(l=s?b[f]:e[f],m[f]=d&&"function"!=typeof b[f]?e[f]:y&&s?i(l,r):g&&b[f]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n[c]=t[c],n}(l):h&&"function"==typeof l?i(Function.call,l):l,h&&((m.virtual||(m.virtual={}))[f]=l,t&a.R&&x&&!x[f]&&u(x,f,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){"use strict";var r=e(50),o=e(20),i=e(56),u=e(4),c=e(8),a=e(5),f=e(47),s=e(23),l=e(53),p=e(1)("iterator"),d=!([].keys&&"next"in[].keys()),v="@@iterator",h="keys",y="values",g=function(){return this};t.exports=function(t,n,e,m,x,b,A){f(e,n,m);var w,_,O,C=function(t){if(!d&&t in j)return j[t];switch(t){case h:return function(){return new e(this,t)};case y:return function(){return new e(this,t)}}return function(){return new e(this,t)}},S=n+" Iterator",M=x==y,E=!1,j=t.prototype,B=j[p]||j[v]||x&&j[x],k=B||C(x),T=x?M?C("entries"):k:void 0,L="Array"==n?j.entries||B:B;if(L&&(O=l(L.call(new t)),O!==Object.prototype&&(s(O,S,!0),r||c(O,p)||u(O,p,g))),M&&B&&B.name!==y&&(E=!0,k=function(){return B.call(this)}),r&&!A||!d&&!E&&j[p]||u(j,p,k),a[n]=k,a[S]=g,x)if(w={values:M?k:C(y),keys:b?k:C(h),entries:T},A)for(_ in w)_ in j||i(j,_,w[_]);else o(o.P+o.F*(d||E),n,w);return w}},function(t,n,e){var r=e(9).f,o=e(8),i=e(1)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(2),o="__core-js_shared__",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,n,e){var r=e(14),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n,e){var r=e(10);t.exports=function(t){return Object(r(t))}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(40),o=e(1)("iterator"),i=e(5);t.exports=e(6).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){"use strict";var r=e(57)(!0);e(22)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,n,e,r){var o=Math.pow(Math.pow(2,-c),n),i=r/4*o,a=[-i,i];return t.slice(1).reduce(function(t,n){var e=(t[t.length-1]+n)/2,r=a[Math.floor(Math.random()*a.length)];return[].concat((0,u.default)(t),[e+r,n])},[t[0]])}Object.defineProperty(n,"__esModule",{value:!0});var i=e(34),u=r(i);n.displaceMidpoints=o;var c=1.2},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,n,e,r){var o={ref:0,factor:1},i={ref:Math.floor(e/2),factor:-1},c=function(t){return t*o.factor+o.ref},a=function(t){return t*i.factor+i.ref};t.lineWidth=2,t.strokeStyle="#3e2723",t.fillStyle="#795548";var f=n/(r.length-1),s=r.map(function(t,n){return{x:c(f*n),y:a(t)}});u(t,s,n,e)}function i(t,n,e,r,o){var i=24,u=10;t.font=i+'px "Open Sans"',t.textAlign="end",t.fillStyle="black",t.fillText(r+" / "+o,n-u,2*u+i/2)}function u(t,n,e,r){t.beginPath(),t.moveTo(0,r);var o=!0,i=!1,u=void 0;try{for(var c,f=(0,a.default)(n);!(o=(c=f.next()).done);o=!0){var s=c.value,l=s.x,p=s.y;t.lineTo(l,p)}}catch(t){i=!0,u=t}finally{try{!o&&f.return&&f.return()}finally{if(i)throw u}}t.lineTo(e,r),t.lineTo(0,r),t.fill(),t.stroke()}Object.defineProperty(n,"__esModule",{value:!0});var c=e(33),a=r(c);n.renderPath=o,n.renderProgress=i},function(t,n,e){t.exports={default:e(35),__esModule:!0}},function(t,n,e){t.exports={default:e(36),__esModule:!0}},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}n.__esModule=!0;var o=e(32),i=r(o);n.default=function(t){if(Array.isArray(t)){for(var n=0,e=Array(t.length);n<t.length;n++)e[n]=t[n];return e}return(0,i.default)(t)}},function(t,n,e){e(29),e(61),t.exports=e(6).Array.from},function(t,n,e){e(63),e(29),t.exports=e(60)},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){t.exports=function(){}},function(t,n,e){var r=e(15),o=e(25),i=e(58);t.exports=function(t){return function(n,e,u){var c,a=r(n),f=o(a.length),s=i(u,f);if(t&&e!=e){for(;f>s;)if(c=a[s++],c!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===e)return t||s||0;return!t&&-1}}},function(t,n,e){var r=e(16),o=e(1)("toStringTag"),i="Arguments"==r(function(){return arguments}()),u=function(t,n){try{return t[n]}catch(t){}};t.exports=function(t){var n,e,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=u(n=Object(t),o))?e:i?r(n):"Object"==(c=r(n))&&"function"==typeof n.callee?"Arguments":c}},function(t,n,e){"use strict";var r=e(9),o=e(12);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){t.exports=e(2).document&&document.documentElement},function(t,n,e){t.exports=!e(7)&&!e(21)(function(){return 7!=Object.defineProperty(e(18)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(16);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(5),o=e(1)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){var r=e(3);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){"use strict";var r=e(51),o=e(12),i=e(23),u={};e(4)(u,e(1)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(1)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],u=i[r]();u.next=function(){return{done:e=!0}},i[r]=function(){return u},t(i)}catch(t){}return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n){t.exports=!0},function(t,n,e){var r=e(3),o=e(52),i=e(19),u=e(13)("IE_PROTO"),c=function(){},a="prototype",f=function(){var t,n=e(18)("iframe"),r=i.length,o="<",u=">";for(n.style.display="none",e(42).appendChild(n),n.src="javascript:",t=n.contentWindow.document,t.open(),t.write(o+"script"+u+"document.F=Object"+o+"/script"+u),t.close(),f=t.F;r--;)delete f[a][i[r]];return f()};t.exports=Object.create||function(t,n){var e;return null!==t?(c[a]=r(t),e=new c,c[a]=null,e[u]=t):e=f(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(9),o=e(3),i=e(55);t.exports=e(7)?Object.defineProperties:function(t,n){o(t);for(var e,u=i(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(8),o=e(26),i=e(13)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(8),o=e(15),i=e(39)(!1),u=e(13)("IE_PROTO");t.exports=function(t,n){var e,c=o(t),a=0,f=[];for(e in c)e!=u&&r(c,e)&&f.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~i(f,e)||f.push(e));return f}},function(t,n,e){var r=e(54),o=e(19);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){t.exports=e(4)},function(t,n,e){var r=e(14),o=e(10);t.exports=function(t){return function(n,e){var i,u,c=String(o(n)),a=r(e),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a),i<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):(i-55296<<10)+(u-56320)+65536)}}},function(t,n,e){var r=e(14),o=Math.max,i=Math.min;t.exports=function(t,n){return t=r(t),t<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(11);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){var r=e(3),o=e(28);t.exports=e(6).getIterator=function(t){var n=o(t);if("function"!=typeof n)throw TypeError(t+" is not iterable!");return r(n.call(t))}},function(t,n,e){"use strict";var r=e(17),o=e(20),i=e(26),u=e(46),c=e(45),a=e(25),f=e(41),s=e(28);o(o.S+o.F*!e(48)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,p=i(t),d="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,y=void 0!==h,g=0,m=s(p);if(y&&(h=r(h,v>2?arguments[2]:void 0,2)),void 0==m||d==Array&&c(m))for(n=a(p.length),e=new d(n);n>g;g++)f(e,g,y?h(p[g],g):p[g]);else for(l=m.call(p),e=new d;!(o=l.next()).done;g++)f(e,g,y?u(l,h,[o.value,g],!0):o.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(38),o=e(49),i=e(5),u=e(15);t.exports=e(22)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):"keys"==n?o(0,e):"values"==n?o(0,t[e]):o(0,[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){e(62);for(var r=e(2),o=e(4),i=e(5),u=e(1)("toStringTag"),c=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],a=0;a<5;a++){var f=c[a],s=r[f],l=s&&s.prototype;l&&!l[u]&&o(l,u,f),i[f]=i.Array}},function(t,n,e){n=t.exports=e(65)(),n.push([t.id,"body,html{font-family:Open Sans,sans-serif;font-size:14px}label{font-weight:700}canvas{border:1px solid #000}form{margin-bottom:5px}input[type=range]{vertical-align:middle}#fps,#iterations{width:60px}","",{version:3,sources:["/./scss/scss/index.scss"],names:[],mappings:"AAAA,UAEE,iCACA,cAAe,CAChB,MAGC,eAAiB,CAClB,OAGC,qBAAsB,CACvB,KAGC,iBAAkB,CACnB,kBAGC,qBAAsB,CACvB,AAIA,iBAGC,UAAW,CACZ",file:"index.scss",sourcesContent:["html,\nbody {\n  font-family: 'Open Sans', sans-serif;\n  font-size: 14px;\n}\n\nlabel {\n  font-weight: bold;\n}\n\ncanvas {\n  border: 1px solid #000;\n}\n\nform {\n  margin-bottom: 5px;\n}\n\ninput[type=\"range\"] {\n  vertical-align: middle;\n}\n\n:global(#iterations) {\n  width: 60px;\n}\n\n:global(#fps) {\n  width: 60px;\n}\n"],sourceRoot:"webpack://"}])},function(t,n){t.exports=function(){var t=[];return t.toString=function(){for(var t=[],n=0;n<this.length;n++){var e=this[n];e[2]?t.push("@media "+e[2]+"{"+e[1]+"}"):t.push(e[1])}return t.join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var u=n[o];"number"==typeof u[0]&&r[u[0]]||(e&&!u[2]?u[2]=e:e&&(u[2]="("+u[2]+") and ("+e+")"),t.push(u))}},t}},function(t,n,e){function r(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=d[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(f(r.parts[i],n))}else{for(var u=[],i=0;i<r.parts.length;i++)u.push(f(r.parts[i],n));d[r.id]={id:r.id,refs:1,parts:u}}}}function o(t){for(var n=[],e={},r=0;r<t.length;r++){var o=t[r],i=o[0],u=o[1],c=o[2],a=o[3],f={css:u,media:c,sourceMap:a};e[i]?e[i].parts.push(f):n.push(e[i]={id:i,parts:[f]})}return n}function i(t,n){var e=y(),r=x[x.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),x.push(n);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");e.appendChild(n)}}function u(t){t.parentNode.removeChild(t);var n=x.indexOf(t);n>=0&&x.splice(n,1)}function c(t){var n=document.createElement("style");return n.type="text/css",i(t,n),n}function a(t){var n=document.createElement("link");return n.rel="stylesheet",i(t,n),n}function f(t,n){var e,r,o;if(n.singleton){var i=m++;e=g||(g=c(n)),r=s.bind(null,e,i,!1),o=s.bind(null,e,i,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=a(n),r=p.bind(null,e),o=function(){u(e),e.href&&URL.revokeObjectURL(e.href)}):(e=c(n),r=l.bind(null,e),o=function(){u(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}function s(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(n,o);else{var i=document.createTextNode(o),u=t.childNodes;u[n]&&t.removeChild(u[n]),u.length?t.insertBefore(i,u[n]):t.appendChild(i)}}function l(t,n){var e=n.css,r=n.media;if(r&&t.setAttribute("media",r),t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}function p(t,n){var e=n.css,r=n.sourceMap;r&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([e],{type:"text/css"}),i=t.href;t.href=URL.createObjectURL(o),i&&URL.revokeObjectURL(i)}var d={},v=function(t){var n;return function(){return"undefined"==typeof n&&(n=t.apply(this,arguments)),n}},h=v(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),y=v(function(){return document.head||document.getElementsByTagName("head")[0]}),g=null,m=0,x=[];t.exports=function(t,n){n=n||{},"undefined"==typeof n.singleton&&(n.singleton=h()),"undefined"==typeof n.insertAt&&(n.insertAt="bottom");var e=o(t);return r(e,n),function(t){for(var i=[],u=0;u<e.length;u++){var c=e[u],a=d[c.id];a.refs--,i.push(a)}if(t){var f=o(t);r(f,n)}for(var u=0;u<i.length;u++){var a=i[u];if(0===a.refs){for(var s=0;s<a.parts.length;s++)a.parts[s]();delete d[a.id]}}}};var b=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}()},function(t,n,e){var r=e(64);"string"==typeof r&&(r=[[t.id,r,""]]);e(66)(r,{});r.locals&&(t.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,